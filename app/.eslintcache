[{"/home/victor/code/wine_recommender/src/index.tsx":"1","/home/victor/code/wine_recommender/src/reportWebVitals.js":"2","/home/victor/code/wine_recommender/src/App.tsx":"3","/home/victor/code/wine_recommender/src/fetcher.ts":"4","/home/victor/code/wine_recommender/src/Results.tsx":"5","/home/victor/code/wine_recommender/src/Form.tsx":"6"},{"size":497,"mtime":1723072915889,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1723072915889,"results":"9","hashOfConfig":"8"},{"size":2731,"mtime":1723072915889,"results":"10","hashOfConfig":"8"},{"size":480,"mtime":1723072915889,"results":"11","hashOfConfig":"8"},{"size":3839,"mtime":1723072915889,"results":"12","hashOfConfig":"8"},{"size":6051,"mtime":1723072915889,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"16efoes",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"16"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},"/home/victor/code/wine_recommender/src/index.tsx",[],["31","32"],"/home/victor/code/wine_recommender/src/reportWebVitals.js",[],["33","34"],"/home/victor/code/wine_recommender/src/App.tsx",[],"/home/victor/code/wine_recommender/src/fetcher.ts",[],"/home/victor/code/wine_recommender/src/Results.tsx",["35","36","37"],"import React, { FormEvent, useContext, useEffect, useState } from \"react\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport {\n  Card,\n  Typography,\n  CardHeader,\n  CardMedia,\n  IconButton,\n  ButtonBase,\n  CardContent,\n  Grow,\n} from \"@material-ui/core\";\nimport LocalBarIcon from \"@material-ui/icons/LocalBar\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport { Rating } from \"@material-ui/lab\";\nimport \"./App.css\";\nimport { resultWinesContext } from \"./App\";\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    heading: {\n      display: \"flex\",\n    },\n    backButton: {\n      width: 50,\n    },\n    title: {\n      width: \"100%\",\n      transform: \"translateX(-25px)\",\n    },\n    wines: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      justifyContent: \"center\",\n    },\n    card: {\n      [theme.breakpoints.down(\"sm\")]: {\n        margin: 10,\n        width: `calc(100% / 1)`,\n        maxWidth: 300,\n      },\n      [theme.breakpoints.up(\"md\")]: {\n        margin: 10,\n        width: `calc(100% / 2)`,\n        maxWidth: 300,\n      },\n    },\n    media: {\n      height: 0,\n      backgroundSize: \"contain\",\n      paddingTop: 150,\n    },\n  })\n);\n\ninterface ResultsComponentProps {}\nconst Results = (props: ResultsComponentProps) => {\n  const classes = useStyles();\n  const { wines, setWines } = useContext(resultWinesContext);\n  console.log(wines);\n  return (\n    <>\n      <div className={classes.heading}>\n        <IconButton\n          className={classes.backButton}\n          color=\"primary\"\n          aria-label=\"go back\"\n          onClick={() => {\n            setWines([]);\n          }}\n        >\n          <ArrowBackIosIcon />\n        </IconButton>\n        <Typography variant=\"h4\" className={classes.title}>\n          Rekommenderade viner f√∂r dig\n        </Typography>\n      </div>\n      <div className={classes.wines}>\n        {wines.map((wine, i) => (\n          <Grow\n            in\n            style={{ transformOrigin: \"0 0 0\" }}\n            {...(true ? { timeout: 300 * i + 500 } : {})}\n          >\n            <Card\n              title={wine.nameBold}\n              className={classes.card}\n              elevation={10.0}\n              key={wine.nameBold + wine.nameThin}\n            >\n              <ButtonBase\n                style={{ width: \"100%\", display: \"block\" }}\n                disableRipple\n                onClick={(e) => window.open(wine.url, \"_blank\")}\n              >\n                <CardHeader title={wine.nameBold} subheader={wine.nameThin} />\n                <CardMedia\n                  className={classes.media}\n                  image={wine.imageURL + \"_100.png\"}\n                  title={wine.nameBold}\n                />\n                <CardContent>\n                  <Typography\n                    variant=\"body1\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    {wine.country}\n                  </Typography>\n                  <Typography variant=\"body1\" component=\"p\">\n                    {wine.price} kr\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                  >\n                    {wine.tasteDescription}\n                  </Typography>\n                </CardContent>\n                {wine.tfidf_score > 0.15 && (\n                  <Rating\n                    name=\"match\"\n                    disabled={true}\n                    precision={0.1}\n                    value={wine.tfidf_score === 0 ? 1 : wine.tfidf_score * 5}\n                    icon={<LocalBarIcon />}\n                  />\n                )}\n              </ButtonBase>\n            </Card>\n          </Grow>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default Results;\n","/home/victor/code/wine_recommender/src/Form.tsx",["38","39","40"],"import React, { FormEvent, useEffect, useState, useContext } from 'react'\nimport useSWR from 'swr'\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport MuiAutocomplete from '@material-ui/lab/Autocomplete';\nimport { Card, CircularProgress, TextField, FormControl, Button, Typography, Slider, Slide } from '@material-ui/core'\nimport './App.css';\nimport { resultWinesContext } from './App';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    card: {\n      padding: 40,\n      width: \"100vw\",\n      maxWidth: 600,\n    },\n    formWrap: {\n      width: \"100%\",\n      display: \"flex\",\n      flexDirection: \"column\",\n    },\n    formControl: {\n      padding: theme.spacing(1),\n      width: \"100%\",\n      maxHeight: 300,\n    },\n    chips: {\n      display: 'flex',\n      flexWrap: 'wrap',\n    },\n    chip: {\n      margin: 2,\n    },\n    buttonContainer: {\n      width: \"100%\",\n      display: \"flex\",\n      justifyContent: \"center\",\n    }\n  }),\n)\n\nconst numFormatter = (num: number): string => {\n  if (num > 9999) {\n    return (num / 1000).toFixed(0) + \"K\"; // convert to K for number from > 1000 < 1 million\n  }\n  \n  return num.toString(); // if value < 1000, nothing to do\n}\n\ninterface FormComponentProps {\n  data: WineFormData\n}\nconst Form = ({ data }: FormComponentProps) => {\n  const classes = useStyles();\n  const { setWines } = useContext(resultWinesContext)\n\n  const [selectedCountries, setSelectedCountries] = useState<string[]>([])\n  const [selectedTypes, setSelectedTypes] = useState<string[]>([])\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([])\n  const [selectedGrapes, setSelectedGrapes] = useState<string[]>([])\n  const [priceRangePercentage, setPriceRangePercentage] = useState<number[]>([0, 100])\n  const [priceRange, setPriceRange] = useState<number[]>([0, 50000])\n  const [hasUpdatedPrice, setHasUpdatedPrice] = useState<boolean>(false)\n  const [tasteDescription, setTasteDescription] = useState<string>(\"\")\n\n  useEffect(() => {\n    if (data && !hasUpdatedPrice) {\n      setPriceRange([data.priceLow, data.priceHigh])\n      setHasUpdatedPrice(true)\n    }\n  }, [data, hasUpdatedPrice])\n\n  useEffect(() => {\n    if (data) {\n      const newLow: number = (priceRangePercentage[0] / 100) * data.priceHigh\n      const newMax: number = (priceRangePercentage[1] / 100) * data.priceHigh\n      setPriceRange([newLow, newMax])\n    }\n  }, [data, priceRangePercentage])\n\n  useEffect(() => {\n    console.log(priceRange)\n  }, [priceRange])\n\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    \n    const res = await fetch('/api/recommend', {\n      \"method\": \"POST\",\n      \"headers\": { 'Content-Type': 'application/json' },\n      \"body\": JSON.stringify({\n        countries: selectedCountries,\n        types: selectedTypes,\n        categoryTastes: selectedCategories,\n        grapes: selectedGrapes,\n        priceLow: priceRange[0],\n        priceHigh: priceRange[1],\n        tasteDescription\n      })\n    })\n\n    if (res.ok) {\n      const data: { results: Wine[] } = await res.json()\n      setWines(data.results)\n    } else {}\n  }\n\n  return (\n    <Card title=\"Vinrekommendation\" className={classes.card}>\n      <Typography variant=\"h4\">\n        Vinrekommendation\n      </Typography>\n\n      <form action=\"/\" method=\"POST\" onSubmit={handleSubmit} className={classes.formWrap}>\n        <FormControl className={classes.formControl}>\n          <Autocomplete<string[]>\n            setState={setSelectedCountries}\n            data={data.countries}\n            label=\"Land\"\n          />\n        </FormControl>\n        <FormControl className={classes.formControl}>\n          <Autocomplete<string[]>\n            setState={setSelectedTypes}\n            data={data.types}\n            label=\"Typ\"\n          />\n        </FormControl>\n        <FormControl className={classes.formControl}>\n          <Autocomplete<string[]>\n            setState={setSelectedCategories}\n            data={data.categoryTastes}\n            label=\"Kategori\"\n          />\n        </FormControl>\n        <FormControl className={classes.formControl}>\n          <Autocomplete<string[]>\n            setState={setSelectedGrapes}\n            data={data.grapes}\n            label=\"Druvor\"\n          />\n        </FormControl>\n        <FormControl className={classes.formControl} style={{ alignItems: \"flex-start\" }}>\n          <Typography gutterBottom>\n            Pris\n          </Typography>\n          <Slider\n            value={priceRangePercentage}\n            onChange={(e, newValue) => {setPriceRangePercentage(newValue as number[])}}\n            valueLabelDisplay=\"auto\"\n            aria-labelledby=\"range-slider\"\n            // max={data.priceHigh}\n            scale={(x) => Math.floor((x/100) * data.priceHigh)}\n            // scale={(x) => x ** 5}\n            valueLabelFormat={numFormatter}\n            // getAriaValueText={valuetext}\n          />\n        </FormControl>\n        <FormControl className={classes.formControl}>\n          <TextField\n            value={tasteDescription}\n            onChange={(e) => {setTasteDescription(e.currentTarget.value)}}\n            id=\"outlined-textarea\"\n            label=\"Dina smakpreferenser\"\n            // placeholder=\"Placeholder\"\n            multiline\n            variant=\"outlined\"\n          />\n        </FormControl>\n        <div className={classes.buttonContainer}>\n          <Button type=\"submit\" variant=\"contained\">\n            Hitta viner\n          </Button>\n        </div>\n      </form>\n    </Card>\n  )\n}\n\ninterface AutocompleteProps<T> {\n  setState: React.Dispatch<React.SetStateAction<T>>\n  data: T\n  label: string\n}\nfunction Autocomplete<T>(props: AutocompleteProps<T>) {\n  return (\n    <MuiAutocomplete\n      multiple\n      id=\"tags-standard\"\n      options={props.data as any}\n      onChange={(e, newValue) => {props.setState((newValue as any) as T)}}\n      renderInput={(params) => (\n        <TextField\n          {...params}\n          variant=\"standard\"\n          label={props.label}\n        />\n      )}\n    />\n  )\n}\n\nexport default Form\n",["41","42"],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":17,"nodeType":"49","messageId":"50","endLine":1,"endColumn":26},{"ruleId":"47","severity":1,"message":"51","line":1,"column":40,"nodeType":"49","messageId":"50","endLine":1,"endColumn":49},{"ruleId":"47","severity":1,"message":"52","line":1,"column":51,"nodeType":"49","messageId":"50","endLine":1,"endColumn":59},{"ruleId":"47","severity":1,"message":"53","line":2,"column":8,"nodeType":"49","messageId":"50","endLine":2,"endColumn":14},{"ruleId":"47","severity":1,"message":"54","line":5,"column":16,"nodeType":"49","messageId":"50","endLine":5,"endColumn":32},{"ruleId":"47","severity":1,"message":"55","line":5,"column":86,"nodeType":"49","messageId":"50","endLine":5,"endColumn":91},{"ruleId":"43","replacedBy":"56"},{"ruleId":"45","replacedBy":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"@typescript-eslint/no-unused-vars","'FormEvent' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'useSWR' is defined but never used.","'CircularProgress' is defined but never used.","'Slide' is defined but never used.",["58"],["59"],"no-global-assign","no-unsafe-negation"]